AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # VPC作成
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: CF-Tutorial

  # IGW作成
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CF-Tutorial

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FirstVPC
      InternetGatewayId: !Ref InternetGateway

  # ルートテーブル作成
  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: CF-Tutorial

  # ルートテーブルへIGWの関連付け
  FrontendRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # サブネット作成
  FrontendSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: CF-Tutorial

  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: CF-Tutorial

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: "10.0.10.0/24"
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: CF-Tutorial

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: "10.0.11.0/24"
      VpcId: !Ref FirstVPC
      Tags:
        - Key: Name
          Value: CF-Tutorial

  # サブネットをルーティングテーブルと紐付け
  FrontendSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet
      RouteTableId: !Ref FrontendRouteTable

  # セキュリティグループ作成
  Ec2SecurityGroupApp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow http and ssh
      VpcId: !Ref FirstVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: CF-Tutorial

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref FirstVPC
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: "10.0.0.100/32"
      Tags:
        - Key: Name
          Value: CF-Tutorial

#  # S3アクセス用ロールの作成
#  S3AccessRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - "ec2.amazonaws.com"
#            Action:
#              - "sts:AssumeRole"
#      Path: "/"
#      ManagedPolicyArns:
#        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
#      RoleName: S3Access
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial
#
#  S3AccessInstanceProfile:
#    Type: "AWS::IAM::InstanceProfile"
#    Properties:
#      Path: "/"
#      Roles:
#        - Ref: S3AccessRole

  # EC2インスタンス作成
  Ec2InstanceServer:
    Type: "AWS::EC2::Instance"
    Properties:
#      IamInstanceProfile:
#        !Ref S3AccessInstanceProfile
      # AmazonLinuxを指定しています
      ImageId: ami-05ffd9ad4ddd0d6e2
      InstanceType: "t2.micro"
      KeyName: "training-dev-keypair"
      SecurityGroupIds:
        - !Ref Ec2SecurityGroupApp
      SubnetId:
         !Ref FrontendSubnet
      PrivateIpAddress: 10.0.0.100
      #KeyName: Raise-Tech_kimu
      Tags:
        - Key: Name
          Value: CF-Tutorial

  # ALBのターゲットグループ作成
  # 参考URL: https://qiita.com/y-ohgi/items/63f5079a3352026ea23a
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref FirstVPC
      # HealthCheck
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      # Routing
      # MEMO: トラフィックポートの場合は 'traffic-port'
      Port: '80'
      Protocol: HTTP
      TargetType: 'instance'
      Targets:
        - Id: !Ref Ec2InstanceServer
          Port: 80
      Tags:
        - Key: Name
          Value: CF-Tutorial

  # ALB作成
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: 'application'
      SecurityGroups: [!Ref Ec2SecurityGroupApp]
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
      Subnets:
        - !Ref FrontendSubnet
        - !Ref FrontendSubnet2
      Tags:
        - Key: Name
          Value: CF-Tutorial

  # ALBのリスナー作成
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: 'HTTP'

#  # S3バケット作成
#  myS3:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: "cf-s3-2023-714"
#      AccessControl: PublicReadWrite
#      PublicAccessBlockConfiguration: 
#        BlockPublicAcls: false
#        BlockPublicPolicy: false
#        IgnorePublicAcls: false
#        RestrictPublicBuckets: false
#      OwnershipControls:
#        Rules:
#          - ObjectOwnership: ObjectWriter
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: AES256
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial

  # RDS作成
#  MyDB:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBInstanceIdentifier: MyDB
#      VPCSecurityGroups:
#        - Ref: DBEC2SecurityGroup
#      AllocatedStorage: '5'
#      DBInstanceClass: db.t2.micro
#      Engine: MySQL
#      AllocatedStorage: 20
#      StorageType: gp2
#      MasterUsername: admin
#      MasterUserPassword: test12345
#      DBSubnetGroupName: !Ref DBSubnetGroup
#      EnableIAMDatabaseAuthentication: true
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial
#
#  DBSubnetGroup:
#    Type: "AWS::RDS::DBSubnetGroup"
#    Properties:
#      DBSubnetGroupDescription: DB subnet group
#      SubnetIds:
#          - Ref: PrivateSubnet
#          - Ref: PrivateSubnet2
#      Tags:
#        - Key: Name
#          Value: CF-Tutorial
